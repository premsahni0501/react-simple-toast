{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["ToastStateContext","createContext","ToastDispatchContext","ToastReducer","state","action","messages","found","m","filtered","toast","clearTimeout","Error","ToastProvider","children","useReducer","value","dispatch","useToastState","context","useContext","useToastDispatch","useToastShow","timestamp","Date","removeTimeout","setTimeout","type","timeout","timer","ToastConsumer","console","useEffect","lastChild","document","behavior","className","style","role","key","Math","onClick","App","showToast","ToastWrapper","ReactDOM","render","getElementById"],"mappings":"mTAGMA,EAAoBC,0BACpBC,EAAuBD,0BAE7B,SAASE,EAAaC,EAAOC,GAC3B,OAAQA,EAAR,MACE,WACE,MAAO,CACLC,SAAU,GAAF,mBAAMF,EAAJ,UAAF,CAAsBC,EAApB,SAGd,aAAe,IACLC,EAAR,EAAQA,SACFC,EAAQD,UAAgBE,YAAC,OAAIA,cAAgBH,EAAnD,aACMI,EAAWH,UAAgBE,YAAC,OAAIA,cAAgBH,EAAtD,aACA,GAAIE,EAAJ,OAAkB,CAChB,IAAMG,EAAQH,EAAd,GACAI,aAAaD,EAAbC,SAEF,MAAO,CACLL,SAAU,gBAGd,QACE,MAAM,IAAIM,MAAM,0BAAV,OAAoCP,EAA1C,QAIN,SAASQ,EAAc,GAAc,IAAZC,EAAY,EAAZA,SAAY,EACTC,qBAAWZ,EAAc,CAAEG,SAAU,KAD5B,mBAC7B,EAD6B,KAC7B,EAD6B,KAEnC,OACE,kBAACN,EAAD,UAA4BgB,MAAOZ,GACjC,kBAACF,EAAD,UAA+Bc,MAAOC,GACpC,yBAHN,KASF,SAASC,IACP,IAAMC,EAAUC,qBAAhB,GACA,YAAID,EACF,MAAM,IAAIP,MAAV,qDAEF,SAEF,SAASS,IACP,IAAMF,EAAUC,qBAAhB,GACA,YAAID,EACF,MAAM,IAAIP,MAAV,wDAEF,SAEF,SAASU,IACP,IAAML,EAAWI,IACjB,OAAO,cACL,MACA,IAAME,EAAYC,KAAlB,MACMC,EAAgB,kBAAMC,YAAW,WACrCT,EAAS,CAAEU,KAAF,SAAkBJ,gBAC1BK,GAFH,MAaAX,EAViB,CACfU,KADe,OAEfjB,MAAO,OAELmB,MAAK,IACIJ,IAETF,eAIJE,MAGJ,SAASK,EAAc,GAAc,IAAZhB,EAAY,EAAZA,SACjBV,EAAQc,IAUd,OATAa,eACAC,qBAAU,WACR,IAAMC,EAAYC,uBAAlB,oCACA,GACED,iBAAyB,CACvBE,SAAU,aAGb,CAPHH,IASE,kBAAChC,EAAD,eAEImB,YACE,YAAIA,EACF,MAAM,IAAIP,MAAV,qDAFO,IAIDN,EAAR,EAAQA,SAER,OACE,kBAACJ,EAAD,eACGe,YAAQ,OACP,+BAEGX,EAAA,OACC,yBAAK8B,UAAW,iBAAmBC,GAE/B/B,OAAaE,YAAC,OACZ,yBACE4B,UAAW,SAAWC,EACtBC,KAFF,QAGEC,IAAK,IAAMC,cAAgBhC,EAAEe,WAC7B,8BAAOf,EAJT,KAKE,uBALF,MAME,4BACE4B,UAAWC,EACXI,QAAS,kBAAMxB,EAAS,CAAEU,KAAF,SAAkBJ,UAAWf,EAAEe,cAT7DjB,YAHL,WALT,Y,UC5FJoC,EAAM,WACV,IAAMC,EAAYrB,IAClB,OAAO,4BAAQmB,QAAS,kBAAME,EAAU,+BAAgC,OAAjE,eAOMC,EALM,kBACnB,kBAAC/B,EAAD,KACE,kBAAC,EAAD,QCLJgC,IAASC,OACP,kBAAC,EAAD,MACAZ,SAASa,eAAe,U","file":"static/js/main.0b3813ac.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext, useEffect } from 'react';\nimport style from './Toaster.scss'\n\nconst ToastStateContext = createContext();\nconst ToastDispatchContext = createContext();\n\nfunction ToastReducer(state, action) {\n  switch (action.type) {\n    case 'show': {\n      return {\n        messages: [...state.messages, action.toast]\n      }\n    }\n    case 'remove': {\n      const { messages } = state;\n      const found = messages.filter(m => m.timestamp === action.timestamp);\n      const filtered = messages.filter(m => m.timestamp !== action.timestamp);\n      if (found.length) {\n        const toast = found[0];\n        clearTimeout(toast.timer());\n      }\n      return {\n        messages: [...filtered]\n      }\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`)\n    }\n  }\n}\nfunction ToastProvider({ children }) {\n  const [state, dispatch] = useReducer(ToastReducer, { messages: [] });\n  return (\n    <ToastStateContext.Provider value={state}>\n      <ToastDispatchContext.Provider value={dispatch}>\n        <ToastConsumer>{children}</ToastConsumer>\n      </ToastDispatchContext.Provider>\n    </ToastStateContext.Provider>\n  )\n}\n\nfunction useToastState() {\n  const context = useContext(ToastStateContext);\n  if (context === undefined) {\n    throw new Error('useToastState must be used within a ToastProvider')\n  }\n  return context\n}\nfunction useToastDispatch() {\n  const context = useContext(ToastDispatchContext);\n  if (context === undefined) {\n    throw new Error('useToastDispatch must be used within a ToastProvider')\n  }\n  return context\n}\nfunction useToastShow() {\n  const dispatch = useToastDispatch();\n  return (msg, timeout) => {\n    if (!msg) return;\n    const timestamp = Date.now();\n    const removeTimeout = () => setTimeout(() => {\n      dispatch({ type: 'remove', timestamp });\n    }, timeout || 5000);\n    const toastObj = {\n      type: 'show',\n      toast: {\n        msg,\n        timer() {\n          return removeTimeout();\n        },\n        timestamp\n      }\n    }\n    dispatch(toastObj);\n    removeTimeout()\n  }\n}\nfunction ToastConsumer({ children }) {\n  const state = useToastState()\n  console.log(state)\n  useEffect(() => {\n    const lastChild = document.querySelector('.toast-wrapper .toast:last-child');\n    if (lastChild) {\n      lastChild.scrollIntoView({\n        behavior: 'smooth'\n      })\n    }\n  }, [state])\n  return (\n    <ToastStateContext.Consumer>\n      {\n        context => {\n          if (context === undefined) {\n            throw new Error('ToastConsumer must be used within a ToastProvider')\n          }\n          const { messages } = context;\n\n          return (\n            <ToastDispatchContext.Consumer>\n              {dispatch => (\n                <div>\n                  {children}\n                  {messages.length ? (\n                    <div className={'toast-wrapper ' + style['toast-wrapper']}>\n                      {\n                        messages.map(m => (\n                          <div\n                            className={'toast ' + style['toast']}\n                            role=\"alert\"\n                            key={'_' + Math.random() * m.timestamp}>\n                            <span>{m.msg}</span>\n                            <br></br>\n                            <button\n                              className={style['toast-btn']}\n                              onClick={() => dispatch({ type: 'remove', timestamp: m.timestamp })}>\n                              &times;\n                              </button>\n                          </div>\n                        )).reverse()\n                      }\n                    </div>\n                  ) : null}\n                </div>\n              )}\n            </ToastDispatchContext.Consumer>\n          )\n        }\n      }\n    </ToastStateContext.Consumer>\n  )\n}\nfunction useToast() {\n  return [useToastState(), useToastDispatch()]\n}\n\nfunction withShowToast(WrappedComponent) {\n  return function (props) {\n    const showToast = useToastShow();\n    return <WrappedComponent {...props} showToast={showToast} />\n  }\n}\nexport { useToast, ToastProvider, ToastConsumer, useToastShow, withShowToast };","import React from 'react'\n\nimport { useToastShow, ToastProvider } from 'react-simple-toast'\nimport 'react-simple-toast/dist/index.css'\n\nconst App = () => {\n  const showToast = useToastShow();\n  return <button onClick={() => showToast('This is a cool toast message', 10000)}>Show Toast</button>\n}\nconst ToastWrapper = () => (\n  <ToastProvider>\n    <App />\n  </ToastProvider>\n)\nexport default ToastWrapper\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}